#!/system/bin/sh
# fbind Utilities
# Copyright (C) 2017-2019, VR25 @ xda-developers
# License: GPL V3+


main() {

  umask 0
  interactiveMode=true
  modData=/data/media/0/.FBind
  modPath=/system
  config=$modData/config.txt

  exxit() {
    local exitCode=$?
    echo
    exit $exitCode
  }
  trap exxit EXIT

  # root check
  echo
  if ! ls /data/data 1>/dev/null 2>&1; then
    echo "(!) Must run as root (su)"
    exit 1
  fi

  mkdir -p $modData

  . $modPath/bin/fbindcore.sh
  apply_config # & handle LUKS

  case $1 in
    -a|--auto-mount) toggle_auto_mount;;
    -b|--bind-mount) bind_mount "$2" "$3" 1>/dev/null;;
    -c|--config) shift; edit $config $@;;
    -C|--cryptsetup) shift; $modPath/bin/cryptsetup $@;;
    -f|--fuse) force_fuse;;
    -h|--help) usage;;
    -i|--info) info;;
    -l|--log) shift; edit $modData/logs/fbind-boot*.log $@;;
    -m|--mount) bind_mount_wrapper "$2";;
    -M|--move) mv_data_wrapper "$2";;
    -Mm) fbind -M "$2"; fbind -m "$2";;
    -r|--readme) shift; edit $modData/info/README.md $@;;
    -R|--remove) shift; remove_wrapper "$@";;
    -u|--unmount) unmount_wrapper "$2";;
    -um|--remount) fbind -u "$2"; fbind -m "$2";;
    *) main_menu;;
  esac
}


# move data
mv_data() {
  if ! is_mounted "$1" && [ -n "$(ls -A "$1" 2>/dev/null)" ]; then
    echo
    echo "$1 --> $2"
    rm -rf "$2" 2>/dev/null
    if cp -a "$1" "$2"; then
      rm -rf "$1" 2>/dev/null
      return 0
    else
      echo "(!) Copy failed"
      echo "- Source data left intact"
      return 1
    fi
  fi
}


unmount() {
  if is_mounted "$1"; then
    echo "<$1>"
    umount -f "$1"
    if grep -iq '/storage/emulated sdcardfs' /proc/mounts && echo "$1" | grep -q $prefix; then
      echo "<${1/default/read}>"
      umount -f "${1/default/read}"
      if is_mounted "${1/default/write}"; then
        echo "<${1/default/write}>"
        umount -f "${1/default/write}"
      fi
    fi
    rmdir "$1" 2>/dev/null
  fi
}


usage() {
  cat <<USAGE
$([ -n "$1" ] && echo "All commands" || intro)

Usage: fbind or fbind <options(s)> <argument(s)>

<no options>   Launch the folder mounting wizard.

-a|--auto-mount   Toggle on boot auto-mount (default: enabled).

-b|--bind-mount <target> <mount point>   Bind-mount folders not listed in config.txt. Extra SDcarsFS paths are handled automatically. Missing directories are created accordingly.
  e.g., fbind -b /data/someFolder /data/mountHere

-c|--config <editor [opts]>   Open config.txt w/ <editor [opts]> (default: vim/vi).
  e.g., fbind -c nano -l

-C|--cryptsetup <opt(s)> <arg(s)>   Run $modPath/bin/cryptsetup <opt(s)> <arg(s)>.

-f|--fuse   Toggle force FUSE yes/no (default: no). This is automatically enabled during installation if /data/forcefuse exists or the zip name contains the word "fuse" (case insensitive) or PROPFILE=true in config.sh. The setting persists across upgrades.

-h|--help  List all commands.

-i|--info   Show debugging info.

-l|--log  <editor [opts]>   Open fbind-boot-\$deviceName.log w/ <editor [opts]> (default: vim/vi).
  e.g., fbind -l

-m|--mount <pattern|pattern2|...>   Bind-mount matched or all (no arg).
  e.g., fbind -m Whats|Downl|part

-M|--move <pattern|pattern2|...>   Move matched or all (no args) to external storage. Only unmounted folders are affected.
  e.g., fbind -M Download|obb

-Mm <pattern|pattern2|...>   Same as "fbind -M <arg> && fbind -m <arg>"
  e.g., fbind -Mm

-r|--readme   Open README.md w/ <editor [opts]> (default: vim/vi).

-R|--remove <target>   Remove stubborn/unwanted file/folder from \$intsd and \$extsd. <target> is optional. By default, all <remove> lines from config are included.
  e.g., fbind -R Android/data/com.facebook.orca

-u|--unmount <pattern|pattern2|... or [mount point]>   Unmount matched or all (no arg). This works for regular bind-mounts, SDcardFS bind-mounts, regular partitions, loop devices and LUKS/LUKS2 encrypted volumes. Unmounting all doesn't affect partitions nor loop devices. These must be unmounted with a pattern argument. For unmounting folders bound with the -b|--bind-mount option, <mount point> must be supplied, since these pairs aren't in config.txt.
  e.g., fbind -u loop|part|Downl

-um|--remount <pattern|pattern2|...>   Remount matched or all (no arg).
  e.g., fbind -um Download|obb
USAGE
}


info() {
  echo -e "PROPS\n"
  getprop | grep -E 'product|version|esdfs|fuse|sdcardfs' | sed 's/^/ /'
  echo -e "\n\nVARS\n"
  set | sed 's/^/ /'
  echo -e '\n'
  echo -e "CONFIG\n"
  if ! grep -q '[a-z]' $config; then
    echo "-- NULL --"
  else
    cat $config | while read line; do
      if echo "$line" | grep -Eq '^from_to |^target '; then
        is_mounted "$intsd/$(echo "$line" | awk '{print $2}' | sed 's/"//g' | sed "s/'//g")" \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -q '^obbf '; then
        is_mounted "$obb/$(echo "$line" | awk '{print $2}' | sed 's/"//g' | sed "s/'//g")" \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -q '^obb$'; then
        is_mounted "$obb" \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -Eq '^part |^loop |^bind_mount '; then
        is_mounted "$(eval echo "$line" | awk '{print $3}' | sed 's/"//g' | sed "s/'//g")" \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      else
        echo " $line"
      fi
    done
  fi
}


mv_data_wrapper() {
  echo "Moving..."
  obb() { mv_data $obb $extobb; }
  bind_mount() { mv_data "$2" "$1"; }
  obbf() { mv_data $obb/$1 $extobb/$1; }
  target() { mv_data "$intsd/$1" "$extsd/$1"; }
  from_to() { mv_data "$intsd/$1" "$extsd/$2"; }

  # $intsd --> $extsd/$1
  int_extf() {
    if [ -n "$1" ]; then
      mv_data $intsd "$extsd/$1"
    else
      mv_data $intsd $extsd/.fbind
    fi
  }

  if [ -n "$1" ]; then
    grep -E '^int_extf|^bind_mount |^obb|^from_to |^target ' $config 2>/dev/null | grep -E "$1" 1>$tmpf 2>/dev/null
  else
    grep -E '^int_extf|^bind_mount |^obb|^from_to |^target ' $config 1>$tmpf 2>/dev/null
  fi

  . $tmpf
  rm $tmpf
  echo
  echo "- End"
}


unmount_wrapper() {
  echo "Unmounting..."
  echo
  if is_mounted "$1"; then
    unmount "$1"

  else
    obb() { unmount $obb; }
    bind_mount() { unmount "$2"; }
    obbf() { unmount $obb/$1; }
    target() { unmount "$intsd/$1"; }
    from_to() { unmount "$intsd/$1"; }

    int_extf() {
      unmount $obb
      unmount $intsd/Android
      unmount $intsd/data
      unmount $intsd
    }

    if [ -n "$1" ]; then
      loop() { unmount "$2"; }

      part() {
        echo "$1 $2" | grep -q '^\-o ' && shift 2
        unmount "$2"
        echo "$1" | grep -q '\-\-L' \
          && $modPath/bin/cryptsetup luksClose $(echo ${1##*/} | sed 's/--L.*//')
      }

      grep -E '^int_extf|^bind_mount |^obb|^from_to |^target |^loop |^part ' $config | grep -E "$1" 2>/dev/null >$tmpf

    else
      grep -E '^int_extf|^bind_mount |^obb|^from_to |^target ' $config >$tmpf
    fi

    . $tmpf
    rm $tmpf
  fi
  echo
  echo "- End"
}


edit() {
  f=$1
  shift
  if [ -n "$1" ]; then
    $@ $f
  else
    vim $f 2>/dev/null || vi $f
  fi
}


force_fuse() {
  if [ -e $modPath/system.prop ]; then
    mv $modPath/system.prop $modPath/FUSE.prop
    echo "(i) Force FUSE: no"
    echo "- Change takes effect after a reboot."
  else
    mv $modPath/FUSE.prop $modPath/system.prop
    echo "(i) Force FUSE: yes"
    echo "- Change takes effect after a reboot."
  fi
}


toggle_auto_mount() {
  if grep -q noAutoMount $config; then
    sed -i /noAutoMount/d $config
    echo "(i) Auto-mount enabled"
  else
    echo noAutoMount >>$config
    echo "(i) Auto-mount disabled"
  fi
}


main_menu() {
  local target=""
  [ -z "$modified" ] && modified=false
  [ -z "$alreadyMoved" ] && alreadyMoved=false
  [ -n "$1" ]
  echo
  [ -n "$1" ] && echo "Main Menu" || intro
  echo
  PS3="
--> OPTION <enter>: "
  cat <<SKIP >$tmpf # ...because non-interactive shells don't like the <select ... do ...; done> construct, but I do. Does that make me an interactive shell?
  select target in non_media_to_external \
    media_to_external \
    obb_to_external \
    troubleshooting \
    documentation \
    all_commands \
    exit_wizard \
    boot_log
  do
    \$target
    break
  done
SKIP
  . $tmpf
  main_menu noReset
}


media_to_external() {
  local target="" line="" ans=no
  echo
  echo "(i) Input targets, one at a time (e.g., $([ -n "$2" ] && echo "$2" || echo "DCIM/Camera") <enter>). Press <enter> again when done."
  echo

  while read target; do
    if [ -n "$target" ]; then
      if [ -n "$line" ]; then
        if [ -n "$1" ]; then
          grep -q "$target" $config || line="$line
$1 \"$target\""
        else
          grep -q "$target" $config || line="$line
from_to \"$target\" \".fbind/$target\""
        fi
      else
        if [ -n "$1" ]; then
          grep -q "$target" $config || line="$1 \"$target\""
        else
          grep -q "$target" $config || line="from_to \"$target\" \".fbind/$target\""
        fi
      fi
    else
      echo "$line" >$tmpf
      break
    fi
  done

  if grep -q .. $tmpf; then
    echo "Generated config:"
    cat $tmpf | tee -a $config
    modified=true
    rm $tmpf
    echo
    echo -n "(?) Move data & bind folders now (y/N)? "
    read ans
    if echo $ans | grep -iq y; then
      fbind -M
      fbind -m
      alreadyMoved=true
    fi
  fi
}


non_media_to_external() {
  media_to_external target "Android/data <enter>, TitaniumBackup"
}


obb_to_external() {
  local option=""
  echo
  cat <<SKIP >$tmpf
  select option in all specific; do
    case \$option in
      all)
        if ! grep -Eq '^obb$|^obb ' $config; then
          echo obb >>$config
          modified=true
          echo
          echo Done
          echo -n "(?) Move data & bind folders now (y/N)? "
          read ans
          if echo $ans | grep -iq y; then
            fbind -M
            fbind -m
            alreadyMoved=true
          fi
        fi
      ;;
      *)
        media_to_external obbf com.madgames.greatgame
      ;;
    esac
    break
  done
SKIP
  . $tmpf
}


exit_wizard() {
  local ans=no
  echo
  if $modified && ! $alreadyMoved; then
    echo -n "(?) Move data & bind folders now (y/N)? "
    read ans
    if echo $ans | grep -iq y; then
      fbind -M
      fbind -m
    fi
  fi
  rm $tmpf 2>/dev/null
  exit 0
}


all_commands() {
  echo
  usage noIntro
  echo
}


doc_and_log() {
  echo
  echo "(i) Once in the editor, type \":q! <enter>\" to return to the main menu."
  echo -n "- Press <enter> to continue.."
  read
  edit $modData/$1
}


documentation() {
  doc_and_log info/README.md
}


boot_log() {
  doc_and_log logs/fbind-boot*.log
}


intro() {
  cat <<INTRO
fbind
Copyright (C) 2017-2019, VR25 @ xda-developers
License: GPL V3+
INTRO
}


troubleshooting() {
  local line=""
  local println=false
  echo
  cat ${config%/*}/info/README.md | while read line; do
    echo "$line" | grep -q '\(LF\)' && println=true
    $println && echo "$line" | grep -q '\-\-\-' && break
    $println && echo "$line"
  done
  echo
  echo -n "(i) Press <enter> to return to the main menu.."
read
}


main $@
